// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BatteryState.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool microxrceddsgen.
 */

#ifndef _BatteryState_H_
#define _BatteryState_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include <stdbool.h>
#include "std_msgs/msg/Header.h"

#define POWER_SUPPLY_STATUS_UNKNOWN 0
#define POWER_SUPPLY_STATUS_CHARGING 1
#define POWER_SUPPLY_STATUS_DISCHARGING 2
#define POWER_SUPPLY_STATUS_NOT_CHARGING 3
#define POWER_SUPPLY_STATUS_FULL 4
#define POWER_SUPPLY_HEALTH_UNKNOWN 0
#define POWER_SUPPLY_HEALTH_GOOD 1
#define POWER_SUPPLY_HEALTH_OVERHEAT 2
#define POWER_SUPPLY_HEALTH_DEAD 3
#define POWER_SUPPLY_HEALTH_OVERVOLTAGE 4
#define POWER_SUPPLY_HEALTH_UNSPEC_FAILURE 5
#define POWER_SUPPLY_HEALTH_COLD 6
#define POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE 7
#define POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE 8
#define POWER_SUPPLY_TECHNOLOGY_UNKNOWN 0
#define POWER_SUPPLY_TECHNOLOGY_NIMH 1
#define POWER_SUPPLY_TECHNOLOGY_LION 2
#define POWER_SUPPLY_TECHNOLOGY_LIPO 3
#define POWER_SUPPLY_TECHNOLOGY_LIFE 4
#define POWER_SUPPLY_TECHNOLOGY_NICD 5
#define POWER_SUPPLY_TECHNOLOGY_LIMN 6
typedef struct sensor_msgs_msg_BatteryState
{
    std_msgs_msg_Header header;

    float voltage;

    float temperature;

    float current;

    float charge;

    float capacity;

    float design_capacity;

    float percentage;

    uint8_t power_supply_status;

    uint8_t power_supply_health;

    uint8_t power_supply_technology;

    bool present;

    float cell_voltage[14];

    float cell_temperature[14];

    char location[255];

    char serial_number[255];

} sensor_msgs_msg_BatteryState;

struct ucdrBuffer;
bool sensor_msgs_msg_BatteryState_serialize_topic(struct ucdrBuffer* writer, const sensor_msgs_msg_BatteryState* topic);
bool sensor_msgs_msg_BatteryState_deserialize_topic(struct ucdrBuffer* reader, sensor_msgs_msg_BatteryState* topic);
uint32_t sensor_msgs_msg_BatteryState_size_of_topic(const sensor_msgs_msg_BatteryState* topic, uint32_t size);

#ifdef __cplusplus
}
#endif

#endif // _BatteryState_H_
